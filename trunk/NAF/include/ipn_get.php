<?
/************************************************************************
 * This file handles the IPN requests from PayPal. See 
 * https://www.paypal.com/html/ipn.pdf for more information on IPN.  
 * 
 * You may not, under any circumstances, modify this file unless you are
 * absolutely certain you know what you are doing.
 * 
 ************************************************************************/ 

  require_once 'include/db.php';

  class IPN {
    var $result;     // The result of the last validity check
    var $curl_error; // The message from the last curl invocation

    // PayPal variables

    // Information on us. These variables are copies of data we have
    // specified during the single_item setup.
    var $receiver_email; // Email address
    var $item_name;      // Item name                  
    var $item_number;    // Item number                
    var $quantity;       // Quantity                
    var $invoice;        // Invoice number. Must be unique.
    var $custom;         // Custom data
   
    // Option data
    var $option_name1;   // Option 1 name as requested by us.
    var $option_selection1; // Option 1 choice as selected by the customer
    var $option_name2;   // Option 2 name as requested by us.
    var $option_selection2; // Option 2 choice as selected by the customer


    var $num_cart_items; // Number of items in cart. Disregard this

    var $payment_status; // Status of the payment. "Completed",
                         // "Pending", "Failed" or "Denied"
    var $pending_reason; // Reson the payment is pending. "echeck", 
                         // "intl", "verify", "address", "upgrade",
                         // "unilateral" or "other"

    var $payment_date;   // Time/Date stamp generated by PayPal
                         // Format: "18:30:30 Jan 1, 2000 PST"
    var $payment_gross;  // Full dollar amount of the payment
    var $payment_fee;    // PayPal's cut

    var $txn_id;         // Transaction ID generated by PayPal
    var $txn_type;       // Type of transaction. "web_accept",
                         // "cart" or "send_money". Should be
                         // "web_accept" for our purposes.

    // Customer information

    var $first_name;     // First name
    var $last_name;      // Last name
    var $address_street; // Street address
    var $address_city;   // City
    var $address_state;  // State
    var $address_zip;    // Zip code
    var $address_country; // Country

    var $payer_email;    // Email
    var $payer_status;   // Status. "verified", "unverified" or 
                         // "intl_verified"

    var $payment_type;   // Payment type. "echeck" or "instant"

    var $notify_version; // "1.3"
    var $verify_sign;    // Encrypted signature used to validate
                         // the authenticity of the transaction

    var $mc_gross;       // Unused variable
    var $mc_fee;         // Unused variable
    var $mc_currency;    // Unused variable

    /** Get the result of the last verification request 
     *
     * @returns The result of the last verification request.
     */
    function getResult() { 
      return $this->result;
    }
 
    /** Verifies the current IPN request is valid.
     * This is done by sending back all received data to
     * https://www.paypal.com/cgi-bin/webscr with an additional variable:
     * cmd=_notify-validate.
     * 
     * When the IPN is verified:
     * 1. Check that the "payment_status" is "completed".
     * 2. Check the "txn_id" against the previous PayPal transaction
     *    to ensure it is not a duplicate.
     * 3. Check "receiver_email".
     * 4. Update database.
     *
     * If this function returns Zero, check the query result with
     * the getResult() cuntion. A true INVALID response will be reflected
     * by the returned string.
     *
     * An INVALID request should be logged and investigated. If the valid()
     * function returns zero and the request is not INVALID, something
     * went wrong with the cURL request and this should be investigated
     * as well.
     * 
     * @returns Non-zero if the IPN is verified. Zero if it is invalid.
     */
    function verify() {
      // Setup post variables

      $postFields = "receiver_email=" . urlencode($this->receiver_email) . "&" .
                    "item_name=" . urlencode($this->item_name) . "&" .
                    "item_number=" . urlencode($this->item_number) . "&" .
                    "quantity=" . urlencode($this->quantity) . "&" .
                    "invoice=" . urlencode($this->invoice) . "&" .
                    "option_name1=" . urlencode($this->option_name1) . "&" .
                    "option_selection1=" . urlencode($this->option_selection1) . "&" .
                    "option_name2=" . urlencode($this->option_name2) . "&" .
                    "option_selection2=" . urlencode($this->option_selection2) . "&" .
                    "num_cart_items=" . urlencode($this->num_cart_items) . "&" .
                    "payment_status=" . urlencode($this->payment_status) . "&" .
                    "pending_reason=" . urlencode($this->pending_reason) . "&" .
                    "payment_date=" . urlencode($this->payment_date) . "&" .
                    "payment_gross=" . urlencode($this->payment_gross) . "&" .
                    "payment_fee=" . urlencode($this->payment_fee) . "&" .
                    "txn_id=" . urlencode($this->txn_id) . "&" .
                    "txn_type=" . urlencode($this->txn_type) . "&" .
                    "first_name=" . urlencode($this->first_name) . "&" .
                    "last_name=" . urlencode($this->last_name) . "&" .
                    "address_street=" . urlencode($this->address_street) . "&" .
                    "address_city=" . urlencode($this->address_city) . "&" .
                    "address_state=" . urlencode($this->address_state) . "&" .
                    "address_zip=" . urlencode($this->address_zip) . "&" .
                    "address_country=" . urlencode($this->address_country) . "&" .
                    "payer_email=" . urlencode($this->payer_email) . "&" .
                    "payer_status=" . urlencode($this->payer_status) . "&" .
                    "payment_type=" . urlencode($this->payment_type) . "&" .
                    "notify_version=" . urlencode($this->notify_version) . "&" .
                    "verify_sign=" . urlencode($this->verify_sign) . "&" .
                    "mc_gross=" . urlencode($this->mc_gross) . "&" .
                    "mc_fee=" . urlencode($this->mc_fee) . "&" .
                    "mc_currency=" . urlencode($this->mc_currency) . "&" .
                    "cmd=_notify-validate";

      // Send the post request

      // Initialize cURL
      $ch = curl_init("http://www.paypal.com/cgi-bin/webscr");

      // Setup cURL options
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); // Return the result instead
                                                   // of writing it out.  
      curl_setopt($ch, CURLOPT_GETFIELDS, $postFields); // Setup post fields.
      
      $this->result = curl_exec($ch); // Execute the post

      $this->curl_error = curl_error($ch); // Save the error string

      curl_close($ch); // Close the channel

      // Check response

      if (strcmp($this->result, "VALID") == 0) {
        return 1;
      }
      else if (strcmp($this->result, "INVALID") == 0) {
        return 0;
      }
      else {
        // The request failed. This _should_ only happen if we were unable
        // to access PayPal for some reason.
        return 0;
      }
    }

    /** Setup the variables for this IPN request.
     * The variables are taken from the $_GET[] variables.
     */
    function setup() {
      $this->receiver_email = $_GET['receiver_email'];
      $this->item_name = $_GET['item_name'];
      $this->item_number = $_GET['item_number'];
      $this->quantity = $_GET['quantity'];
      $this->invoice = $_GET['invoice'];
      $this->custom = $_GET['custom'];
      $this->option_name1 = $POST['option_name1'];
      $this->option_selection1 = $POST['option_selection1'];
      $this->option_name2 = $POST['option_name2'];
      $this->option_selection2 = $POST['option_selection2'];
      $this->num_cart_items = $_GET['num_cart_items'];
      $this->payment_status = $_GET['payment_status'];
      $this->pending_reason = $_GET['pending_reason'];
      $this->payment_date = $_GET['payment_date'];
      $this->payment_gross = $_GET['payment_gross'];
      $this->payment_fee = $_GET['payment_fee'];
      $this->txn_id = $_GET['txn_id'];
      $this->txn_type = $_GET['txn_type'];
      $this->first_name = $_GET['first_name'];
      $this->last_name = $_GET['last_name'];
      $this->address_street = $_GET['address_street'];
      $this->address_city = $_GET['address_city'];
      $this->address_state = $_GET['address_state'];
      $this->address_zip = $_GET['address_zip'];
      $this->address_country = $_GET['address_country'];
      $this->payment_type = $_GET['payment_type'];
      $this->notify_version = $_GET['notify_version'];
      $this->verify_sign = $_GET['verify_sign'];
      $this->mc_gross = $_GET['mc_gross'];
      $this->mc_fee = $_GET['mc_fee'];
      $this->mc_currency = $_GET['mc_currency'];
    }

    function logQuery($db, $errorCode=0) {
      $status = $errorCode==0 ? "PROCESSED" : "FAILED";
      $qry = "INSERT INTO naf_transactions (".
             " receiver_email, item_name, item_number, quantity, invoice, custom, option_name1, " .
             " option_selection1, option_name2, option_selection2, num_cart_items, payment_status, " .
             " pending_reason, payment_date, payment_gross, payment_fee, txn_id, txn_type, first_name, " .
             " last_name, address_street, address_city, address_state, address_zip, address_country, " .
             " payment_type, notify_version, verify_sign, mc_gross, mc_fee, mc_currency, naf_status, errorCode " .
             ") " .
             "VALUES (" .
             " '$this->receiver_email', '$this->item_name', '$this->item_number', '$this->quantity', " .
             " '$this->invoice', '$this->custom', '$this->option_name1', '$this->option_selection1', " .
             " '$this->option_name2', '$this->option_selection2', '$this->num_cart_items', " .
             " '$this->payment_status', '$this->pending_reason', '$this->payment_date', '$this->payment_gross', " .
             " '$this->payment_fee', '$this->txn_id', '$this->txn_type', '$this->first_name', '$this->last_name', " .
             " '$this->address_street', '$this->address_city', '$this->adderss_state', '$this->address_zip', " .
             " '$this->address_country', '$this->payment_type', '$this->notify_version', '$this->verify_sign', " .
             " '$this->mc_gross', '$this->mc_fee', '$this->mc_currency', '$status', $errorCode " .
             ")";
      if ($db->query($qry) == 0) {
        return $db->getErrorMessage();
      }

      return "";
    }

    /** Restores the IPN request from the database.
     *
     * @param $db The database object to be used
     * @param $id The identifier of the transaction to be restored.
     *
     * @returns Returns zero for no error or an error string describing the error.
     */
    function restoreIpn($db, $id) {
      $qry = "SELECT * from naf_transactions where naf_txn='$id'";

      if ($db->query($qry) == 0) {
        return $db->getErrorMessage();
      }

      if ($db->numRows() != 0) {
        $ob = $db->getNextObject();

        $this->receiver_email = $ob->receiver_email;
        $this->item_name = $ob->item_name;
        $this->item_number = $ob->item_number;
        $this->quantity = $ob->quantity;
        $this->invoice = $ob->invoice;
        $this->custom = $ob->custom;
        $this->option_name1 = $ob->option_name1;
        $this->option_selection1 = $ob->option_selection1;
        $this->option_name2 = $ob->option_name2;
        $this->option_selection2 = $ob->option_selection2;
        $this->num_cart_items = $ob->num_cart_items;
        $this->payment_status = $ob->payment_status;
        $this->pending_reason = $ob->pending_reason;
        $this->payment_date = $ob->payment_date;
        $this->payment_gross = $ob->payment_gross;
        $this->payment_fee = $ob->payment_fee;
        $this->txn_id = $ob->txn_id;
        $this->txn_type = $ob->txn_type;
        $this->first_name = $ob->first_name;
        $this->last_name = $ob->last_name;
        $this->address_street = $ob->address_street;
        $this->address_city = $ob->address_city;
        $this->address_state = $ob->address_state;
        $this->address_zip = $ob->address_zip;
        $this->address_country = $ob->address_country;
        $this->payment_type = $ob->payment_type;
        $this->notify_version = $ob->notify_version;
        $this->verify_sign = $ob->verify_sign;
        $this->mc_gross = $ob->mc_gross;
        $this->mc_fee = $ob->mc_fee;
        $this->mc_currency = $ob->mc_currency;
        
      }
      else {
        // Shouldn't happen. Trying to restore a transaction that does not exist.
      }

      return 0;
    }
  }
?>
